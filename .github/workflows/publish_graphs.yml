name: Generate and Publish Graphs to GitHub Pages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

jobs:
  generate-and-copy-graph:
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Install SSHPass (for non-interactive SSH)
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Execute graph generation on server and copy back
      run: |
        SERVER_USER="${{ vars.SSH_USER }}"
        SERVER_HOST="${{ vars.SSH_HOST }}"
        REMOTE_PROJECT_PATH="${{ vars.PROJECT_DIR }}"
        GRAPH_OUTPUT_DIR="${REMOTE_PROJECT_PATH}/generated_graphs" # Aligned with actual script output
        # Define the countries to generate graphs for. Use 'all' for all countries.
        COUNTRIES="EE RU AM" # Or "all"

        # Ensure the output directory exists on the server's host filesystem
        ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} "mkdir -p ${GRAPH_OUTPUT_DIR}"

        # Execute script on remote server using docker compose run
        ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} "\
          cd ${REMOTE_PROJECT_PATH} && \
          docker compose -f docker-compose.yml run --build --rm plotly-dash-app python generate_static_graph.py ${COUNTRIES} --output_dir ${GRAPH_OUTPUT_DIR} \
        "

        # Copy generated graph back to runner from the server's host filesystem
        scp -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST}:${GRAPH_OUTPUT_DIR}/*.html ./

    - name: Prepare and upload GitHub Pages artifact
      run: |
        mkdir -p docs/graphs
        mv country_stats_*.html docs/graphs/
      
    - name: Upload GitHub Pages artifact
      uses: actions/upload-artifact@v4
      with:
        name: github-pages
        path: docs/graphs

  publish-to-pages:
    needs: generate-and-copy-graph
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
