services:
  ozi-postgres:
    image: postgres:17-alpine
    env_file:
      - .env.ozi
    container_name: ozi_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_OZI_USER: ${POSTGRES_OZI_USER:-ozi}
      POSTGRES_OZI_PASSWORD: ${POSTGRES_OZI_PASSWORD:-ozi_password}
      POSTGRES_HOST_AUTH_METHOD: password
      POSTGRES_DB: ${POSTGRES_DB:-db}
    volumes:
      - ./create_database_schema.sql:/docker-entrypoint-initdb.d/01_create_database_schema.sql:ro
      - ./insert_countries.sql:/docker-entrypoint-initdb.d/02_insert_countries.sql:ro
      - ./ozi_pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ozi_db2}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ozi_network

  ozi-etl:
    build:
      context: ./etl
      dockerfile: Dockerfile
    env_file:
      - .env.ozi
    container_name: ozi_etl
    depends_on:
      ozi-postgres:
        condition: service_healthy
    mem_limit: 2g
    environment:
      PYTHONPATH: /app
      OZI_DATABASE_HOST:     ozi-postgres
      OZI_DATABASE_PORT:     5432
      OZI_DATABASE_NAME:     ${POSTGRES_DB:-ozi_db2}
      OZI_DATABASE_USER:     ${POSTGRES_OZI_USER:-ozi}
      OZI_DATABASE_PASSWORD: ${POSTGRES_OZI_PASSWORD:-ozi_password}
    volumes:
      - ./etl/logs:/app/etl/logs
    networks:
      - ozi_network

  

  plotly-dash-app:
    build:
      context: ./plotly_dash
      dockerfile: Dockerfile
    container_name: plotly_dash_app
    env_file:
      - .env.ozi
    restart: always
    depends_on:
      ozi-postgres:
        condition: service_healthy
    environment:
      DASH_DB_HOST: ozi-postgres
      DASH_DB_PORT: 5432
      DASH_DB_NAME: ${POSTGRES_DB:-ozi_db2}
    volumes:
      - ./generated_graphs:/app/generated_graphs
    networks:
      - ozi_network

  nginx:
    image: nginx:alpine
    container_name: ozi_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot_etc:/etc/letsencrypt:ro # Mount Certbot configuration and certificates
      - certbot_webroot:/var/www/certbot # Add this line for Certbot challenges
    depends_on:
      - plotly-dash-app
    networks:
      - ozi_network

  redash-server:
    image: redash/redash:25.1.0
    profiles:
      - redash
    command: server
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "5000:5000"
    env_file:
      - .env.redash
    environment:
      PYTHONUNBUFFERED: 0
      REDASH_COOKIE_SECRET: ${REDASH_COOKIE_SECRET:-secret}
      REDASH_SECRET_KEY: ${REDASH_SECRET_KEY:-secret}
      REDASH_REDIS_URL: redis://redash-redis:6379/0
      REDASH_LOG_LEVEL: INFO
      REDASH_DATABASE_URL: postgresql://postgres:${REDASH_POSTGRES_PASSWORD:-password}@redash-postgres/postgres
    depends_on:
      - redash-postgres
      - redash-redis
    restart: unless-stopped
    networks:
      - ozi_network

  redash-worker:
    image: redash/redash:25.1.0
    profiles:
      - redash
    command: worker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env.redash
    environment:
      PYTHONUNBUFFERED: 0
      REDASH_LOG_LEVEL: INFO
      REDASH_REDIS_URL: redis://redash-redis:6379/0
      REDASH_DATABASE_URL: postgresql://postgres:${REDASH_POSTGRES_PASSWORD:-password}@redash-postgres/postgres
    depends_on:
      - redash-postgres
      - redash-redis
    restart: unless-stopped
    networks:
      - ozi_network

  redash-postgres:
    image: postgres:17-alpine
    profiles:
      - redash
    env_file:
      - .env.redash
    environment:
      POSTGRES_PASSWORD: ${REDASH_POSTGRES_PASSWORD:-password}
    volumes:
      - ./redash-pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ozi_network

  redash-redis:
    image: redis:7.0-alpine
    profiles:
      - redash
    restart: unless-stopped
    networks:
      - ozi_network

volumes:
  pgdata:
  certbot_webroot: # Define the new named volume

networks:
  ozi_network:
    driver: bridge